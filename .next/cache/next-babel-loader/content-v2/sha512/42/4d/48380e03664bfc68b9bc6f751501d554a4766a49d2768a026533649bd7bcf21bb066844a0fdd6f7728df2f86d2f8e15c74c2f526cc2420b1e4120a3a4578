{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\WebDesigning\\\\React-Max\\\\React\\\\next-advance\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst MeetupDetailPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://nabil:12345@restapi.bdhad.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetupds\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://nabil:12345@restapi.bdhad.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetupds\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} //\n\nexport default MeetupDetailPage;","map":{"version":3,"sources":["E:/WebDesigning/React-Max/React/next-advance/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetails","MeetupDetailPage","props","meetupData","image","title","address","description","getStaticProps","context","meetupId","params","client","connect","db","meetupsCollection","collection","selectedMeetup","findOne","_id","close","id","toString","getStaticPaths","meetups","find","toArray","fallback","paths","map","meetup"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,QAAQ,GAAGD,OAAO,CAACE,MAAR,CAAeD,QAAhC;AAEA,QAAME,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CACnB,yFADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,UAAd,CAA1B;AACA,QAAMC,cAAc,GAAG,MAAMF,iBAAiB,CAACG,OAAlB,CAA0B;AACrDC,IAAAA,GAAG,EAAEpB,QAAQ,CAACW,QAAD;AADwC,GAA1B,CAA7B;AAIAE,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLlB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVkB,QAAAA,EAAE,EAAEJ,cAAc,CAACE,GAAf,CAAmBG,QAAnB,EADM;AAEVjB,QAAAA,KAAK,EAAEY,cAAc,CAACZ,KAFZ;AAGVD,QAAAA,KAAK,EAAEa,cAAc,CAACb,KAHZ;AAIVG,QAAAA,WAAW,EAAEU,cAAc,CAACV;AAJlB;AADP;AADF,GAAP;AAUD;AAED,OAAO,eAAegB,cAAf,GAAgC;AACrC,QAAMX,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CACnB,yFADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,UAAd,CAA1B;AACA,QAAMQ,OAAO,GAAG,MAAMT,iBAAiB,CAACU,IAAlB,CAAuB,EAAvB,EAA2B;AAAEN,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCO,OAAvC,EAAtB;AAEAd,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLO,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEJ,OAAO,CAACK,GAAR,CAAaC,MAAD,KAAa;AAC9BnB,MAAAA,MAAM,EAAE;AAAED,QAAAA,QAAQ,EAAEoB,MAAM,CAACX,GAAP,CAAWG,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,C,CAED;;AACA,eAAerB,gBAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\n\r\nconst MeetupDetailPage = (props) => {\r\n  return (\r\n    <MeetupDetails\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://nabil:12345@restapi.bdhad.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetupds\");\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://nabil:12345@restapi.bdhad.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetupds\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\n//\r\nexport default MeetupDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}